.. _release-8-0-1:

Release notes for version 8.0.1
===============================

The significant changes to the various parts of the compiler are listed
in the following sections. There have also been numerous bug fixes and
performance improvements over the 7.10 branch.

Highlights
----------

The highlights, since the 7.10 branch, are:

- TODO FIXME

- nokinds

- Support for :ref:`record pattern synonyms <record-patsyn>`

- The :ghc-flag:`-XDeriveAnyClass` extension learned to derive instances for
  classes with associated types (see :ref:`derive-any-class`)

- More reliable DWARF debugging information

- Support for :ref:`injective type classes <injective-ty-fams>`

- Applicative ``do`` notation (see :ref:`applicative-do`)

- Support for wildcards in data and type family instances

- :ghc-flag:`-XStrict` and :ghc-flag:`-XStrictData` extensions, allowing modules
  to be compiled with strict-by-default bindings (see :ref:`strict-haskell`)

- :ghc-flag:`-XDuplicateRecordFields`, allowing multiple datatypes to declare the same
  record field names provided they are used unambiguously (see :ref:`duplicate-record-fields`)

- Support for implicit parameters providing light-weight
  :ref:`callstacks and source locations <implicit-callstacks>`

- User-defined error messages for type errors

- A rewritten (and greatly improved) pattern exhaustiveness checker

- GHC can run the interpreter in a separate process (see
  :ref:`external-interpreter`), and the interpreter can now run profiled
  code.

- GHCi now provides access to stack traces when used with
  :ghc-flag:`-fexternal-interpreter` and :ghc-flag:`-prof` (see
  :ref:`ghci-stack-traces`).

- The reworked users guide you are now reading

- Support for Windows XP and earlier has been dropped.

Full details
------------

Language
~~~~~~~~

-  TODO FIXME.

-  The parser now supports Haddock comments on GADT data constructors.
   For example ::

        data Expr a where
            -- | Just a normal sum
            Sum :: Int -> Int -> Expr Int

-  Implicit parameters of the new ``base`` type :base-ref:`GHC.Stack.CallStack <GHC-Stack.html>`
   are treated specially in function calls, the solver automatically
   appends the source location of the call to the ``CallStack`` in
   the environment. For example ::

        myerror :: (?callStack :: CallStack) => String -> a
        myerror msg = error (msg ++ "\n" ++ prettyCallStack ?callStack)

        ghci> myerror "die"
        *** Exception: die
        CallStack (from ImplicitParams):
          myerror, called at <interactive>:2:1 in interactive:Ghci1

   prints the call-site of ``myerror``. The name of the implicit
   parameter does not matter, but within ``base`` we call it
   ``?callStack``.

   See :ref:`lib-base` for a description of the ``CallStack`` type.

-  GHC now supports visible type application, allowing
   programmers to easily specify how type parameters should be
   instantiated when calling a function. See
   :ref:`visible-type-application` for the details.
   
-  To conform to the common case, the default role assigned to
   parameters of datatypes declared in ``hs-boot`` files is
   ``representational``. However, if the constructor(s) for the datatype
   are given, it makes sense to do normal role inference. This is now
   implemented, effectively making the default role for non-abstract
   datatypes in ``hs-boot`` files to be ``phantom``, like it is in
   regular Haskell code.

-  Wildcards can be used in the type arguments of type/data family
   instance declarations to indicate that the name of a type variable
   doesn't matter. They will be replaced with new unique type variables.
   See :ref:`data-instance-declarations` for more details.

-  GHC now allows to declare type families as injective. Injectivity
   information can then be used by the typechecker. See
   :ref:`injective-ty-fams` for details.

-  Due to a :ghc-ticket:`security issue <10826>`, Safe Haskell now forbids
   annotations in programs marked as :ghc-flag:`-XSafe`.

-  Generic instances can be derived for data types whose constructors have
   arguments with certain unlifted types. See :ref:`generic-programming` for
   more details.

-  GHC generics can now provide strictness information for fields in a data
   constructor via the ``Selector`` type class.

-  The :ghc-flag:`-XDeriveAnyClass` extension now fills in associated type family
   default instances when deriving a class that contains them.

-  Users can now define record pattern synonyms. This allows pattern synonyms
   to behave more like normal data constructors. For example, ::

      pattern P :: a -> b -> (a, b)
      pattern P{x,y} = (x,y)

   will allow ``P`` to be used like a record data constructor and also defines
   selector functions ``x :: (a, b) -> a`` and ``y :: (a, b) -> b``.

-  Pattern synonyms can now be bundled with type constructors. For a pattern
   synonym ``P`` and a type constructor ``T``, ``P`` can be bundled with ``T``
   so that when ``T`` is imported ``P`` is also imported. With this change
   a library author can provide either real data constructors or pattern
   synonyms in an opaque manner. See :ref:`pattern-synonyms` for details. ::

      -- Foo.hs
      module Foo ( T(P) ) where

      data T = T

      pattern P = T

      -- Baz.hs
      module Baz where

      -- P is imported
      import Foo (T(..))

-  Whenever a data instance is exported, the corresponding data family
   is exported, too. This allows one to write ::

     -- Foo.hs
     module Foo where

     data family T a

     -- Bar.hs
     module Bar where

     import Foo

     data instance T Int = MkT

     -- Baz.hs
     module Baz where

     import Bar (T(MkT))

   In previous versions of GHC, this required a workaround via an
   explicit export list in ``Bar``.



Compiler
~~~~~~~~

-  Warnings can now be controlled with ``-W(no-)...`` flags in addition to
   the old ``-f(no-)warn...`` ones. This was done as the first part of a
   rewrite of the warning system to provide better control over warnings,
   better warning messages, and more common syntax compared to other
   compilers. The old ``-f``-based warning flags will remain functional for
   the forseeable future.

-  Added the option :ghc-flag:`-dth-dec-file`. This dumps out a .th.hs file of
   all Template Haskell declarations in a corresponding .hs file. The
   idea is that application developers can check this into their
   repository so that they can grep for identifiers used elsewhere that
   were defined in Template Haskell. This is similar to using
   :ghc-flag:`-ddump-to-file` with :ghc-flag:`-ddump-splices` but it always generates a
   file instead of being coupled to :ghc-flag:`-ddump-to-file` and only outputs
   code that does not exist in the .hs file and a comment for the splice
   location in the original file.

-  Added the option :ghc-flag:`-fprint-expanded-types`. When enabled, GHC also
   prints type-synonym-expanded types in type errors.

-  Added the option :ghc-flag:`-fcpr-anal`. When enabled, the demand analyser
   performs CPR analysis. It is implied by :ghc-flag:`-O`. Consequently,
   :ghc-flag:`-fcpr-off` is now removed, run with :ghc-flag:`-fno-cpr-anal` to get the
   old :ghc-flag:`-fcpr-off` behaviour.

-  Added the option :ghc-flag:`-fworker-wrapper`. When enabled, the worker-wrapper
   transformation is performed after a strictness analysis pass. It is implied
   by :ghc-flag:`-O` and by :ghc-flag:`-fstrictness`. It is disabled by :ghc-flag:`-fno-strictness`.
   Enabling :ghc-flag:`-fworker-wrapper` while strictness analysis is disabled (by
   :ghc-flag:`-fno-strictness`) has no effect.

-  Added the options :ghc-flag:`-Wmissed-specialisations` and
   :ghc-flag:`-Wall-missed-specialisations`. When enabled, the simplifier will
   produce a warning when a overloaded imported function cannot be
   specialised (typically due to a missing ``INLINEABLE`` pragma). This
   is intended to alert users to cases where they apply ``INLINEABLE`` but
   may not get the speed-up they expect.

-  Added the option :ghc-flag:`-Wnoncanonical-monad-instances` which helps
   detect noncanonical ``Applicative``/``Monad`` instance definitions.
   See flag description in :ref:`options-sanity` for more details.

-  When printing an out-of-scope error message, GHC will give helpful advice if
   the error might be caused by too restrictive imports.

-  Added the :ghc-flag:`-Wcompat` warning group, along with its opposite
   :ghc-flag:`-Wno-compat`. Turns on warnings that will be enabled by default in the
   future, but remain off in normal compilations for the time being. This
   allows library authors eager to make their code future compatible to adapt
   to new features before they even generate warnings.

-  Added the :ghc-flag:`-Wmissing-monadfail-instance` flag. When enabled, this
   will issue a warning if a failable pattern is used in a context that does
   not have a ``MonadFail`` constraint. This flag represents phase 1 of the
   `MonadFail Proposal (MFP)
   <https://prime.haskell.org/wiki/Libraries/Proposals/MonadFail>`__.

-  Added the :ghc-flag:`-Wsemigroup` flag. When enabled, this
   will issue a warning if a type is an instance of ``Monoid`` but not
   ``Semigroup``, and when a custom definition ``(<>)`` is made. Fixing these
   warnings makes sure the definition of ``Semigroup`` as a superclass of
   ``Monoid`` does not break any code.

-  Added the :ghc-flag:`-Wmissing-pat-syn-sigs` flag. When enabled, this will issue
   a warning when a pattern synonym definition doesn't have a type signature.
   It is turned off by default but enabled by :ghc-flag:`-Wall`.

-  Changed the :ghc-flag:`-fwarn-unused-matches` flag to report unused type variables
   in data and type families in addition to its previous behaviour.
   To avoid warnings, unused type variables should be prefixed or replaced with
   underscores.

-  Added the :ghc-flag:`-Wtoo-many-guards` flag. When enabled, this will issue a
   warning if a pattern match contains too many guards (over 20 at the
   moment). Makes a difference only if pattern match checking is also enabled.

-  Added the :ghc-flag:`-ffull-guard-reasoning` flag. When enabled, pattern match
   checking tries its best to reason about guards. Since the additional
   expressivity may come with a high price in terms of compilation time and
   memory consumption, it is turned off by default.

GHCi
~~~~

-  ``Main`` with an explicit module header but without ``main`` is now
   an error (:ghc-ticket:`7765`).

-  The :ghci-cmd:`:back` and :ghci-cmd:`:forward` commands now take an optional count
   allowing the user to move forward or backward in history several
   steps at a time.

-  Added commands :ghci-cmd:`:load! <:load>` and :ghci-cmd:`:reload! <:reload>`,
   effectively setting :ghc-flag:`-fdefer-type-errors` before loading a module and
   unsetting it after loading if it has not been set before (:ghc-ticket:`8353`).

-  ``ghci -e`` now behaves like :ghc-flag:`ghc -e <-e>` (:ghc-ticket:`9360`).

-  Added support for top-level function declarations (:ghc-ticket:`7253`).

-  The new commands :ghci-cmd:`:all-types`, :ghci-cmd:`:loc-at`, :ghci-cmd:`:type-at`, and
   :ghci-cmd:`:uses` designed for editor-integration
   (such as Emacs' ``haskell-mode``) originally premiered by ``ghci-ng``
   have been integrated into GHCi (:ghc-ticket:`10874`).

-  GHCi now supports decoupled operation between the interpreter and the
   shell. While this is largely an implementation detail, it opens up a few
   interesting possibilities in the future. See :ghc-wiki:`RemoteGHCi` for
   details.

Template Haskell
~~~~~~~~~~~~~~~~

-  The new :ghc-flag:`-XTemplateHaskellQuotes` flag allows to use the
   quotes (not quasi-quotes) subset of ``TemplateHaskell``.  This is
   particularly useful for use with a stage 1 compiler (i.e. GHC
   without interpreter support). Also, :ghc-flag:`-XTemplateHaskellQuotes` is
   considered safe under Safe Haskell.

-  The ``__GLASGOW_HASKELL_TH__`` CPP constant denoting support for
   :ghc-flag:`-XTemplateHaskell` introduced in GHC 7.10.1 has been changed to
   use the values ``1``/``0`` instead of the previous ``YES``/``NO``
   values.

-  Partial type signatures can now be used in splices, see
   :ref:`pts-where`.

-  Template Haskell now fully supports typed holes and quoting unbound
   variables.  This means it is now possible to use pattern splices nested
   inside quotation brackets.

-  Template Haskell now supports the use of ``UInfixT`` in types to
   resolve infix operator fixities, in the same vein as ``UInfixP`` and
   ``UInfixE`` in patterns and expressions. ``ParensT`` and ``InfixT``
   have also been introduced, serving the same functions as their
   pattern and expression counterparts.

- Template Haskell has now explicit support for representing GADTs.  Until
  now GADTs were encoded using ``NormalC``, ``RecC`` (record syntax) and
  ``ForallC`` constructors.  Two new constructors - ``GadtC`` and ``RecGadtC`` -
  are now supported during quoting, splicing and reification.

-  Primitive chars (e.g., ``[| 'a'# |]``) and primitive strings (e.g.,
   ``[| "abc"# |]``) can now be quoted with Template Haskell. The
   ``Lit`` data type also has a new constructor, ``CharPrimL``, for
   primitive char literals.

-  ``addTopDecls`` now accepts annotation pragmas.

-  Internally, the implementation of quasi-quotes has been unified with
   that of normal Template Haskell splices. Under the previous
   implementation, top-level declaration quasi-quotes did not cause a
   break in the declaration groups, unlike splices of the form
   ``$(...)``. This behavior has been preserved under the new
   implementation, and is now recognized and documented in
   :ref:`th-syntax`.

-  The ``Lift`` class is now derivable via the :ghc-flag:`-XDeriveLift` extension. See
   :ref:`deriving-lift` for more information.

-  The ``FamilyD`` data constructor and ``FamFlavour`` data type have
   been removed. Data families are now represented by ``DataFamilyD`` and
   open type families are now represented by ``OpenTypeFamilyD`` instead
   of ``FamilyD``. Common elements of ``OpenTypeFamilyD`` and
   ``ClosedTypeFamilyD`` have been moved to ``TypeFamilyHead``.

-  The representation of ``data``, ``newtype``, ``data instance``, and
   ``newtype instance`` declarations has been changed to allow for
   multi-parameter type classes in the ``deriving`` clause. In particular,
   ``dataD`` and ``newtypeD`` now take a ``CxtQ`` instead of a ``[Name]``
   for the list of derived classes.

-  ``isExtEnabled`` can now be used to determine whether a language extension
   is enabled in the ``Q`` monad. Similarly, ``extsEnabled`` can be used to list
   all enabled language extensions.

-  One can now reify the strictness information of a constructors' fields using
   Template Haskell's ``reifyConStrictness`` function, which takes into account
   whether flags such as :ghc-flag:`-XStrictData` or
   :ghc-flag:`-funbox-strict-fields` are enabled.

Runtime system
~~~~~~~~~~~~~~

- Support for performance monitoring with PAPI has been dropped.

- :rts-flag:`-maxN⟨x⟩ <-maxN>` flag added to complement :rts-flag:`-N`. It will
  choose to use at most ⟨x⟩ capabilities, limited by the number of processors
  as :rts-flag:`-N` is.

Build system
~~~~~~~~~~~~

-  TODO FIXME.

Package system
~~~~~~~~~~~~~~

-  TODO FIXME.

hsc2hs
~~~~~~

- :command:`hsc2hs` now supports the ``#alignment`` macro, which can be used to
  calculate the alignment of a struct in bytes. Previously, ``#alignment``
  had to be implemented manually via a ``#let`` directive, e.g., ::

      #let alignment t = "%lu", (unsigned long)offsetof(struct {char x__; t (y__); }, y__)

  As a result, if you have the above directive in your code, it will now emit
  a warning when compiled with GHC 8.0.

  .. code-block:: none

      Module.hsc:24:0: warning: "hsc_alignment" redefined [enabled by default]
      In file included from dist/build/Module_hsc_make.c:1:0:
      /path/to/ghc/lib/template-hsc.h:88:0: note: this is the location of the previous definition
       #define hsc_alignment(t...) \
       ^

  To make your code free of warnings on GHC 8.0 and still support earlier
  versions, surround the directive with a pragma checking for the right GHC
  version. ::

      #if __GLASGOW_HASKELL__ < 800
      #let alignment t = "%lu", (unsigned long)offsetof(struct {char x__; t (y__); }, y__)
      #endif

Libraries
---------

array
~~~~~

-  Version number XXXXX (was 0.5.0.0)


.. _lib-base:

base
~~~~

See ``changelog.md`` in the ``base`` package for full release notes.

-  Version number 4.9.0.0 (was 4.7.0.0)

-  :base-ref:`GHC.Stack <GHC-Stack.html>` exports two new types ``SrcLoc`` and ``CallStack``. A
   ``SrcLoc`` contains package, module, and file names, as well as start
   and end positions. A ``CallStack`` is essentially a ``[(String, SrcLoc)]``,
   sorted by most-recent call.

-  ``error`` and ``undefined`` will now report a partial stack-trace
   using the new ``CallStack`` feature (and the :ghc-flag:`-prof` stack if
   available).

-  A new function, ``interruptible``, was added to ``GHC.IO`` allowing
   an ``IO`` action to be run such that it can be interrupted by an
   asynchronous exception, even if exceptions are masked (except if
   masked with ``interruptibleMask``).

   This was introduced to fix the behavior of ``allowInterrupt``, which
   would previously incorrectly allow exceptions in uninterruptible
   regions (see :ghc-ticket:`9516`).

-  Per-thread allocation counters (``setAllocationCounter`` and
   ``getAllocationCounter``) and limits (``enableAllocationLimit``,
   ``disableAllocationLimit`` are now available from ``System.Mem``. Previously
   this functionality was only available from :base-ref:`GHC.Conc <GHC-Stack.html>`.

- ``forever``, ``filterM``, ``mapAndUnzipM``, ``zipWithM``, ``zipWithM_``,
  ``replicateM``, and ``replicateM`` were generalized from ``Monad`` to
  ``Applicative``. If this causes performance regressions, try to make the
  implementation of ``(*>)`` match that of ``(>>)``.

- Add ``URec``, ``UAddr``, ``UChar``, ``UDouble``, ``UFloat``, ``UInt``, and ``UWord`` to
  :base-ref:`GHC.Generics <GHC-Generics.html>` as part of making GHC generics
  capable of handling unlifted types (:ghc-ticket:`10868`)

- Expand ``Floating`` class to include operations that allow for better
  precision: ``log1p``, ``expm1``, ``log1pexp`` and ``log1mexp``. These are not
  available from ``Prelude``, but the full class is exported from ``Numeric``.

- Add ``Data.List.NonEmpty`` and ``Data.Semigroup`` (to become
  super-class of ``Monoid`` in the future). These modules were
  provided by the ``semigroups`` package previously. (:ghc-ticket:`10365`)

- The constraints of various functions in ``Control.Monad`` have been
  generalized from ``Monad`` to ``Applicative`` including ``filterM``,
  ``zipWithM`` and ``replicateM_`` (see :ghc-ticket:`10168`).

- Add ``GHC.TypeLits.TypeError`` and ``ErrorMessage`` to allow users
  to define custom compile-time error messages. (see :ref:`custom-errors` and
  the original :ghc-wiki:`proposal <Proposal/CustomTypeErrors>`).

- The ``Generic`` instance for ``Proxy`` is now poly-kinded (see :ghc-ticket:`10775`)

- The ``IsString`` instance for ``[Char]`` has been modified to eliminate
  ambiguity arising from overloaded strings and functions like ``(++)``.

- Move ``Const`` from ``Control.Applicative`` to its own module in
  ``Data.Functor.Const``. (see :ghc-ticket:`11135`)

- Enable ``PolyKinds`` in the ``Data.Functor.Const`` module to give ``Const``
  the kind ``* -> k -> *`` (see :ghc-ticket:`10039`).

binary
~~~~~~

-  Version number XXXXX (was 0.7.1.0)

bytestring
~~~~~~~~~~

-  Version number XXXXX (was 0.10.4.0)

Cabal
~~~~~

-  Version number XXXXX (was 1.18.1.3)

containers
~~~~~~~~~~

-  Version number XXXXX (was 0.5.4.0)

deepseq
~~~~~~~

-  Version number XXXXX (was 1.3.0.2)

directory
~~~~~~~~~

-  Version number XXXXX (was 1.2.0.2)

filepath
~~~~~~~~

-  Version number XXXXX (was 1.3.0.2)

ghc
~~~

-  TODO FIXME.

-  The ``HsBang`` type has been removed in favour of ``HsSrcBang`` and
   ``HsImplBang``. Data constructors now always carry around their
   strictness annotations as the user wrote them, whether from an
   imported module or not.

-  Moved ``startsVarSym``, ``startsVarId``, ``startsConSym``, ``startsConId``,
   ``startsVarSymASCII``, and ``isVarSymChar`` from ``Lexeme`` to the
   ``GHC.Lemexe`` module of the ``ghc-boot`` library.

-  Add ``isImport``, ``isDecl``, and ``isStmt`` functions.

ghc-boot
~~~~~~~~

-  This is an internal package. Use with caution.

-  This package was renamed from ``bin-package-db`` to reflect its new purpose
   of containing intra-GHC functionality that needs to be shared across
   multiple GHC boot libraries.

-  Added ``GHC.Lexeme``, which contains functions for determining if a
   character can be the first letter of a variable or data constructor in
   Haskell, as defined by GHC. (These functions were moved from ``Lexeme``
   in ``ghc``.)

-  Added ``GHC.LanguageExtensions`` which contains a type listing all
   supported language extensions.

ghc-prim
~~~~~~~~

-  Version number XXXXX (was 0.3.1.0)

haskell98
~~~~~~~~~

-  Version number XXXXX (was 2.0.0.3)

haskell2010
~~~~~~~~~~~

-  Version number XXXXX (was 1.1.1.1)

hoopl
~~~~~

-  Version number XXXXX (was 3.10.0.0)

hpc
~~~

-  Version number XXXXX (was 0.6.0.1)

integer-gmp
~~~~~~~~~~~

-  Version number XXXXX (was 0.5.1.0)

old-locale
~~~~~~~~~~

-  Version number XXXXX (was 1.0.0.6)

old-time
~~~~~~~~

-  Version number XXXXX (was 1.1.0.2)

process
~~~~~~~

-  Version number XXXXX (was 1.2.0.0)

template-haskell
~~~~~~~~~~~~~~~~

-  Version number XXXXX (was 2.9.0.0)

-  The ``Lift`` type class for lifting values into Template Haskell
   splices now has a default signature ``lift :: Data a => a -> Q Exp``,
   which means that you do not have to provide an explicit
   implementation of ``lift`` for types which have a ``Data`` instance.
   To manually use this default implementation, you can use the
   ``liftData`` function which is now exported from
   ``Language.Haskell.TH.Syntax``.

-  ``Info``'s constructors no longer have ``Fixity`` fields. A
   ``qReifyFixity`` function was added to the ``Quasi`` type class (as
   well as the ``reifyFixity`` function, specialized for ``Q``) to allow
   lookup of fixity information for any given ``Name``.

time
~~~~

-  Version number XXXXX (was 1.4.1)

unix
~~~~

-  Version number XXXXX (was 2.7.0.0)

Win32
~~~~~

-  Version number XXXXX (was 2.3.0.1)

Known bugs
----------

-  TODO FIXME
