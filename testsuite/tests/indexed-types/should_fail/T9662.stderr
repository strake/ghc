
T9662.hs:47:8:
    Couldn't match type ‘k’ with ‘Int’
      ‘k’ is a rigid type variable bound by
          the type signature for
            test :: Shape (((sh :. k) :. m) :. n)
                    -> Shape (((sh :. m) :. n) :. k)
          at T9662.hs:44:9
    Expected type: Exp (((sh :. k) :. m) :. n)
                   -> Exp (((sh :. m) :. n) :. k)
      Actual type: Exp
                     (Tuple (((Atom a0 :. Atom Int) :. Atom Int) :. Atom Int))
                   -> Exp
                        (Plain (((Unlifted (Atom a0) :. Exp Int) :. Exp Int) :. Exp Int))
    Relevant bindings include
      test :: Shape (((sh :. k) :. m) :. n)
              -> Shape (((sh :. m) :. n) :. k)
        (bound at T9662.hs:45:1)
    In the first argument of ‘backpermute’, namely
      ‘(modify
          (atom :. atom :. atom :. atom)
          (\ (sh :. k :. m :. n) -> (sh :. m :. n :. k)))’
    In the expression:
      backpermute
        (modify
           (atom :. atom :. atom :. atom)
           (\ (sh :. k :. m :. n) -> (sh :. m :. n :. k)))
        id

T9662.hs:47:8:
    Couldn't match type ‘m’ with ‘Int’
      ‘m’ is a rigid type variable bound by
          the type signature for
            test :: Shape (((sh :. k) :. m) :. n)
                    -> Shape (((sh :. m) :. n) :. k)
          at T9662.hs:44:9
    Expected type: Exp (((sh :. k) :. m) :. n)
                   -> Exp (((sh :. m) :. n) :. k)
      Actual type: Exp
                     (Tuple (((Atom a0 :. Atom Int) :. Atom Int) :. Atom Int))
                   -> Exp
                        (Plain (((Unlifted (Atom a0) :. Exp Int) :. Exp Int) :. Exp Int))
    Relevant bindings include
      test :: Shape (((sh :. k) :. m) :. n)
              -> Shape (((sh :. m) :. n) :. k)
        (bound at T9662.hs:45:1)
    In the first argument of ‘backpermute’, namely
      ‘(modify
          (atom :. atom :. atom :. atom)
          (\ (sh :. k :. m :. n) -> (sh :. m :. n :. k)))’
    In the expression:
      backpermute
        (modify
           (atom :. atom :. atom :. atom)
           (\ (sh :. k :. m :. n) -> (sh :. m :. n :. k)))
        id

T9662.hs:47:8:
    Couldn't match type ‘n’ with ‘Int’
      ‘n’ is a rigid type variable bound by
          the type signature for
            test :: Shape (((sh :. k) :. m) :. n)
                    -> Shape (((sh :. m) :. n) :. k)
          at T9662.hs:44:9
    Expected type: Exp (((sh :. k) :. m) :. n)
                   -> Exp (((sh :. m) :. n) :. k)
      Actual type: Exp
                     (Tuple (((Atom a0 :. Atom Int) :. Atom Int) :. Atom Int))
                   -> Exp
                        (Plain (((Unlifted (Atom a0) :. Exp Int) :. Exp Int) :. Exp Int))
    Relevant bindings include
      test :: Shape (((sh :. k) :. m) :. n)
              -> Shape (((sh :. m) :. n) :. k)
        (bound at T9662.hs:45:1)
    In the first argument of ‘backpermute’, namely
      ‘(modify
          (atom :. atom :. atom :. atom)
          (\ (sh :. k :. m :. n) -> (sh :. m :. n :. k)))’
    In the expression:
      backpermute
        (modify
           (atom :. atom :. atom :. atom)
           (\ (sh :. k :. m :. n) -> (sh :. m :. n :. k)))
        id
