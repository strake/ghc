{-# LANGUAGE ConstraintKinds #-}
unit p where
    signature A where
        import Prelude hiding ((==))
        class K a
        class K2 a
        infix 4 ==
        (==) :: K a => a -> a -> Bool
    module M where
        import Prelude hiding ((==))
        import A
        f a b c = a == b && b == c
unit q where
    module A(K, K2, (==)) where
        type K a = Eq a
        type K2 = Eq
unit r where
    dependency p[A=q:A]
