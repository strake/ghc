
rebindable6.hs:99:17: error:
    • Ambiguous type variable ‘t0’ arising from a do statement
      prevents the constraint ‘(HasSeq
                                  (IO a -> t0 -> IO b))’ from being solved.
        (maybe you haven't applied a function to enough arguments?)
      Relevant bindings include
        g :: IO (Maybe b) (bound at rebindable6.hs:97:19)
        f :: IO a (bound at rebindable6.hs:97:17)
        test_do :: IO a -> IO (Maybe b) -> IO b
          (bound at rebindable6.hs:97:9)
      Probable fix: use a type annotation to specify what ‘t0’ should be.
      These potential instance exist:
        instance HasSeq (IO a -> IO b -> IO b)
          -- Defined at rebindable6.hs:55:18
    • In a stmt of a 'do' block: f
      In the expression:
        do f
           Just (b :: b) <- g
           return b
      In an equation for ‘test_do’:
          test_do f g
            = do f
                 Just (b :: b) <- g
                 return b

rebindable6.hs:100:17: error:
    • Ambiguous type variables ‘p0’, ‘t0’ arising from a do statement
      prevents the constraint ‘(HasBind
                                  (IO (Maybe b) -> (Maybe b -> p0) -> t0))’ from being solved.
        (maybe you haven't applied a function to enough arguments?)
      Relevant bindings include
        g :: IO (Maybe b) (bound at rebindable6.hs:97:19)
        test_do :: IO a -> IO (Maybe b) -> IO b
          (bound at rebindable6.hs:97:9)
      Probable fix: use a type annotation to specify what ‘p0’,
                                                          ‘t0’ should be.
      These potential instance exist:
        instance HasBind (IO a -> (a -> IO b) -> IO b)
          -- Defined at rebindable6.hs:50:18
    • In a stmt of a 'do' block: Just (b :: b) <- g
      In the expression:
        do f
           Just (b :: b) <- g
           return b
      In an equation for ‘test_do’:
          test_do f g
            = do f
                 Just (b :: b) <- g
                 return b

rebindable6.hs:101:17: error:
    • Ambiguous type variable ‘p0’ arising from a use of ‘return’
      prevents the constraint ‘(HasReturn (b -> p0))’ from being solved.
        (maybe you haven't applied a function to enough arguments?)
      Relevant bindings include
        b :: b (bound at rebindable6.hs:100:23)
        g :: IO (Maybe b) (bound at rebindable6.hs:97:19)
        test_do :: IO a -> IO (Maybe b) -> IO b
          (bound at rebindable6.hs:97:9)
      Probable fix: use a type annotation to specify what ‘p0’ should be.
      These potential instance exist:
        instance HasReturn (a -> IO a) -- Defined at rebindable6.hs:45:18
    • In a stmt of a 'do' block: return b
      In the expression:
        do f
           Just (b :: b) <- g
           return b
      In an equation for ‘test_do’:
          test_do f g
            = do f
                 Just (b :: b) <- g
                 return b
