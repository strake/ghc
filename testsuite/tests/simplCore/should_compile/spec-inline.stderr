
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 162, types: 61, coercions: 0}

-- RHS size: {terms: 2, types: 1, coercions: 0}
Roman.foo3 :: Int
[GblId, Str=DmdType b]
Roman.foo3 =
  patError @ Int "spec-inline.hs:(19,5)-(29,25)|function go"#

Rec {
-- RHS size: {terms: 55, types: 9, coercions: 0}
Roman.foo_$s$wgo [Occ=LoopBreaker] :: Int# -> Int# -> Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=DmdType <L,U><L,U>]
Roman.foo_$s$wgo =
  \ (sc :: Int#) (sc1 :: Int#) ->
    let {
      a :: Int#
      [LclId, Str=DmdType]
      a = +# (+# (+# (+# (+# (+# sc1 sc1) sc1) sc1) sc1) sc1) sc1 } in
    case tagToEnum# @ Bool (<=# sc 0#) of _ [Occ=Dead] {
      False ->
        case tagToEnum# @ Bool (<# sc 100#) of _ [Occ=Dead] {
          False ->
            case tagToEnum# @ Bool (<# sc 500#) of _ [Occ=Dead] {
              False -> Roman.foo_$s$wgo (-# sc 1#) (+# a a);
              True -> Roman.foo_$s$wgo (-# sc 3#) a
            };
          True -> Roman.foo_$s$wgo (-# sc 2#) sc1
        };
      True -> 0#
    }
end Rec }

-- RHS size: {terms: 74, types: 22, coercions: 0}
Roman.$wgo [InlPrag=[0]] :: Maybe Int -> Maybe Int -> Int#
[GblId,
 Arity=2,
 Str=DmdType <S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 30] 256 0}]
Roman.$wgo =
  \ (w :: Maybe Int) (w1 :: Maybe Int) ->
    case w1 of _ [Occ=Dead] {
      Nothing -> case Roman.foo3 of wild1 { };
      Just x ->
        case x of _ [Occ=Dead] { I# ipv ->
        let {
          a :: Int#
          [LclId, Str=DmdType]
          a = +# (+# (+# (+# (+# (+# ipv ipv) ipv) ipv) ipv) ipv) ipv } in
        case w of _ [Occ=Dead] {
          Nothing -> Roman.foo_$s$wgo 10# a;
          Just n ->
            case n of _ [Occ=Dead] { I# x2 ->
            case tagToEnum# @ Bool (<=# x2 0#) of _ [Occ=Dead] {
              False ->
                case tagToEnum# @ Bool (<# x2 100#) of _ [Occ=Dead] {
                  False ->
                    case tagToEnum# @ Bool (<# x2 500#) of _ [Occ=Dead] {
                      False -> Roman.foo_$s$wgo (-# x2 1#) (+# a a);
                      True -> Roman.foo_$s$wgo (-# x2 3#) a
                    };
                  True -> Roman.foo_$s$wgo (-# x2 2#) ipv
                };
              True -> 0#
            }
            }
        }
        }
    }

-- RHS size: {terms: 9, types: 5, coercions: 0}
Roman.foo_go [InlPrag=INLINE[0]] :: Maybe Int -> Maybe Int -> Int
[GblId,
 Arity=2,
 Str=DmdType <S,1*U><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w [Occ=Once] :: Maybe Int) (w1 [Occ=Once] :: Maybe Int) ->
                 case Roman.$wgo w w1 of ww { __DEFAULT -> I# ww }}]
Roman.foo_go =
  \ (w :: Maybe Int) (w1 :: Maybe Int) ->
    case Roman.$wgo w w1 of ww { __DEFAULT -> I# ww }

-- RHS size: {terms: 2, types: 0, coercions: 0}
Roman.foo2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo2 = I# 6#

-- RHS size: {terms: 2, types: 1, coercions: 0}
Roman.foo1 :: Maybe Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo1 = Just @ Int Roman.foo2

-- RHS size: {terms: 11, types: 4, coercions: 0}
foo :: Int -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n [Occ=Once!] :: Int) ->
                 case n of n1 { I# _ [Occ=Dead] ->
                 Roman.foo_go (Just @ Int n1) Roman.foo1
                 }}]
foo =
  \ (n :: Int) ->
    case n of _ [Occ=Dead] { I# ipv ->
    case Roman.foo_$s$wgo ipv 6# of ww { __DEFAULT -> I# ww }
    }


------ Local rules for imported ids --------
"SC:$wgo0" [0]
    forall (sc :: Int#) (sc1 :: Int#).
      Roman.$wgo (Just @ Int (I# sc)) (Just @ Int (I# sc1))
      = Roman.foo_$s$wgo sc sc1


