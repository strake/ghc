
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 82, types: 42, coercions: 0}

-- RHS size: {terms: 6, types: 3, coercions: 0}
T7360.$WFoo3 [InlPrag=INLINE] :: Int -> Foo
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,U>m3,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (dt [Occ=Once!] :: Int) ->
                 case dt of _ [Occ=Dead] { I# dt [Occ=Once] -> T7360.Foo3 dt }}]
T7360.$WFoo3 =
  \ (dt [Occ=Once!] :: Int) ->
    case dt of _ [Occ=Dead] { I# dt [Occ=Once] -> T7360.Foo3 dt }

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.$trModule2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
T7360.$trModule2 = TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
T7360.$trModule1 = TrNameS "T7360"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
T7360.$trModule :: Module
[GblId[ReflectionId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
T7360.$trModule = Module T7360.$trModule2 T7360.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.$tc'Foo6 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
T7360.$tc'Foo6 = TrNameS "'Foo3"#

-- RHS size: {terms: 5, types: 0, coercions: 0}
T7360.$tc'Foo3 :: TyCon
[GblId[ReflectionId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
T7360.$tc'Foo3 = TyCon 0## 0## T7360.$trModule T7360.$tc'Foo6

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.$tc'Foo5 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
T7360.$tc'Foo5 = TrNameS "'Foo2"#

-- RHS size: {terms: 5, types: 0, coercions: 0}
T7360.$tc'Foo2 :: TyCon
[GblId[ReflectionId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
T7360.$tc'Foo2 = TyCon 0## 0## T7360.$trModule T7360.$tc'Foo5

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.$tc'Foo4 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
T7360.$tc'Foo4 = TrNameS "'Foo1"#

-- RHS size: {terms: 5, types: 0, coercions: 0}
T7360.$tc'Foo1 :: TyCon
[GblId[ReflectionId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
T7360.$tc'Foo1 = TyCon 0## 0## T7360.$trModule T7360.$tc'Foo4

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.$tcFoo1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
T7360.$tcFoo1 = TrNameS "Foo"#

-- RHS size: {terms: 5, types: 0, coercions: 0}
T7360.$tcFoo :: TyCon
[GblId[ReflectionId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
T7360.$tcFoo = TyCon 0## 0## T7360.$trModule T7360.$tcFoo1

-- RHS size: {terms: 5, types: 2, coercions: 0}
fun1 [InlPrag=NOINLINE] :: Foo -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType <S,1*U>]
fun1 = \ (x :: Foo) -> case x of _ [Occ=Dead] { __DEFAULT -> () }

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.fun5 :: ()
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
T7360.fun5 = fun1 T7360.Foo1

-- RHS size: {terms: 2, types: 0, coercions: 0}
T7360.fun4 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
T7360.fun4 = I# 0#

-- RHS size: {terms: 16, types: 13, coercions: 0}
fun2 :: forall a. [a] -> ((), Int)
[GblId,
 Arity=1,
 Str=DmdType <L,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a) (x [Occ=Once!] :: [a]) ->
                 (T7360.fun5,
                  case x of wild {
                    [] -> T7360.fun4;
                    : _ [Occ=Dead] _ [Occ=Dead] ->
                      case GHC.List.$wlenAcc @ a wild 0# of ww2 { __DEFAULT -> I# ww2 }
                  })}]
fun2 =
  \ (@ a) (x :: [a]) ->
    (T7360.fun5,
     case x of wild {
       [] -> T7360.fun4;
       : ds ds1 ->
         case GHC.List.$wlenAcc @ a wild 0# of ww2 { __DEFAULT -> I# ww2 }
     })



