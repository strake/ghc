TYPE SIGNATURES
  test1 ::
    forall (f :: * -> *). Applicative f => (Int -> f Int) -> f Int
  test1a ::
    forall (f :: * -> *). Applicative f => (Int -> f Int) -> f Int
  test2 ::
    forall t b (f :: * -> *).
    (Num b, Num t, Applicative f) =>
    (t -> f b) -> f b
  test2a ::
    forall t b (f :: * -> *).
    (Num b, Num t, Functor f) =>
    (t -> f b) -> f b
  test2b ::
    forall (m :: * -> *) a t. (Num t, Monad m) => (t -> a) -> m a
  test2c ::
    forall t b (f :: * -> *).
    (Num b, Num t, Functor f) =>
    (t -> f b) -> f b
  test3 ::
    forall a t (m :: * -> *) t1.
    (Num t1, Monad m) =>
    (t1 -> m t) -> (t -> t -> m a) -> m a
  test4 ::
    forall a a1 (m :: * -> *) t.
    (Num t, Monad m) =>
    (t -> m a1) -> (a1 -> a1 -> m a) -> m a
  test5 ::
    forall a a1 (m :: * -> *) t.
    (Num t, Monad m) =>
    (t -> m a1) -> (a1 -> a1 -> m a) -> m a
  test6 ::
    forall a (m :: * -> *) t.
    (Num (m a), Monad m) =>
    (m a -> m (m a)) -> t -> m a
TYPE CONSTRUCTORS
COERCION AXIOMS
Dependent modules: []
Dependent packages: [base-4.9.0.0, ghc-prim-0.5.0.0,
                     integer-gmp-1.0.0.1]
