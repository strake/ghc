
NamedWildcardsNotInMonotype.hs:5:1: error:
    Could not deduce (Eq t0)
    from the context: (Show a, Eq t, Eq a)
      bound by the inferred type for ‘foo’:
                 (Show a, Eq t, Eq a) => a -> a -> String
      at NamedWildcardsNotInMonotype.hs:5:1-33
    The type variable ‘t0’ is ambiguous
    In the ambiguity check for the inferred type for ‘foo’
    To defer the ambiguity check to use sites, enable AllowAmbiguousTypes
    When checking the inferred type
      foo :: forall t a. (Show a, Eq t, Eq a) => a -> a -> String
