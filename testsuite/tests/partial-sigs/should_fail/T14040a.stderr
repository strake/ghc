
T14040a.hs:21:18: error:
    • Couldn't match type ‘a’ with ‘k0’
      ‘a’ is a rigid type variable bound by
        the type signature for:
          elimWeirdList :: forall a1 (wl :: WeirdList a1) (p :: forall x.
                                                                x -> WeirdList x -> *).
                           Sing wl
                           -> (forall y. p k0 w0 'WeirdNil)
                           -> (forall z1 (x :: z1) (xs :: WeirdList (WeirdList z1)).
                               Sing x
                               -> Sing xs -> p (WeirdList k1) w1 xs -> p k1 w2 ('WeirdCons x xs))
                           -> p k2 w3 wl
        at T14040a.hs:(21,18)-(28,23)
      Expected type: Sing wl
                     -> (forall y. p k1 w0 'WeirdNil)
                     -> (forall z1 (x :: z1) (xs :: WeirdList (WeirdList z1)).
                         Sing x
                         -> Sing xs -> p (WeirdList k0) w1 xs -> p k0 w2 ('WeirdCons x xs))
                     -> p k2 w3 wl
        Actual type: Sing wl
                     -> (forall y. p k1 w0 'WeirdNil)
                     -> (forall z1 (x :: z1) (xs :: WeirdList (WeirdList z1)).
                         Sing x
                         -> Sing xs -> p (WeirdList k0) w1 xs -> p k0 w2 ('WeirdCons x xs))
                     -> p k2 w3 wl
    • In the ambiguity check for ‘elimWeirdList’
      To defer the ambiguity check to use sites, enable AllowAmbiguousTypes
      In the type signature:
        elimWeirdList :: forall (a :: Type)
                                (wl :: WeirdList a)
                                (p :: forall (x :: Type). x -> WeirdList x -> Type).
                         Sing wl
                         -> (forall (y :: Type). p _ WeirdNil)
                            -> (forall (z :: Type) (x :: z) (xs :: WeirdList (WeirdList z)).
                                Sing x -> Sing xs -> p _ xs -> p _ (WeirdCons x xs))
                               -> p _ wl

T14040a.hs:34:8: error:
    • Cannot apply expression of type ‘Sing wl
                                       -> (forall y. p k0 w0 'WeirdNil)
                                       -> (forall z1 (x :: z1) (xs :: WeirdList (WeirdList z1)).
                                           Sing x
                                           -> Sing xs
                                           -> p (WeirdList k1) w1 xs
                                           -> p k1 w2 ('WeirdCons x xs))
                                       -> p k2 w3 wl’
      to a visible type argument ‘(WeirdList z)’
    • In the sixth argument of ‘pWeirdCons’, namely
        ‘(elimWeirdList @(WeirdList z) @xs @p xs pWeirdNil pWeirdCons)’
      In the expression:
        pWeirdCons
          @z
          @x
          @xs
          x
          xs
          (elimWeirdList @(WeirdList z) @xs @p xs pWeirdNil pWeirdCons)
      In an equation for ‘elimWeirdList’:
          elimWeirdList
            (SWeirdCons (x :: Sing (x :: z))
                        (xs :: Sing (xs :: WeirdList (WeirdList z))))
            pWeirdNil
            pWeirdCons
            = pWeirdCons
                @z
                @x
                @xs
                x
                xs
                (elimWeirdList @(WeirdList z) @xs @p xs pWeirdNil pWeirdCons)
