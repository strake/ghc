{-# LANGUAGE CPP #-}
{-# LANGUAGE NamedFieldPuns #-}

#include "lens.h"

-- | The CompPipeline monad and associated ops
--
-- Defined in separate module so that it can safely be imported from Hooks
module GHC.Driver.Pipeline.Monad (
    CompPipeline, evalP
  , PhasePlus(..)
  , PipeEnv(..), PipeState(..), PipelineOutput(..)
  , getPipeEnv, getPipeState, getPipeSession
  , pipeStateDynFlags, pipeStateModIface
  , hsc_envL, maybe_locL, foreign_osL, ifaceL
  ) where

import GHC.Prelude

import GHC.Utils.Monad.RS.Lazy
import GHC.Utils.Outputable

import GHC.Driver.Session
import GHC.Driver.Phases
import GHC.Driver.Env

import GHC.SysTools.FileCleanup (TempFileLifetime)

import GHC.Types.SourceFile

import GHC.Unit.Module
import GHC.Unit.Module.ModIface
import GHC.Unit.Module.Status

import Data.Tuple (swap)

type CompPipeline = RST PipeEnv PipeState IO

evalP :: CompPipeline a -> PipeEnv -> PipeState -> IO (PipeState, a)
evalP (RST f) env st = swap <$> f env st

data PhasePlus = RealPhase Phase
               | HscOut HscSource ModuleName HscStatus

instance Outputable PhasePlus where
    ppr (RealPhase p) = ppr p
    ppr (HscOut {}) = text "HscOut"

-- -----------------------------------------------------------------------------
-- The pipeline uses a monad to carry around various bits of information

-- PipeEnv: invariant information passed down
data PipeEnv = PipeEnv {
       stop_phase   :: Phase,       -- ^ Stop just before this phase
       src_filename :: String,      -- ^ basename of original input source
       src_basename :: String,      -- ^ basename of original input source
       src_suffix   :: String,      -- ^ its extension
       output_spec  :: PipelineOutput -- ^ says where to put the pipeline output
  }

-- PipeState: information that might change during a pipeline run
data PipeState = PipeState {
       hsc_env   :: HscEnv,
          -- ^ only the DynFlags and the Plugins change in the HscEnv.  The
          -- DynFlags change at various points, for example when we read the
          -- OPTIONS_GHC pragmas in the Cpp phase.
       maybe_loc :: Maybe ModLocation,
          -- ^ the ModLocation.  This is discovered during compilation,
          -- in the Hsc phase where we read the module header.
       foreign_os :: [FilePath],
         -- ^ additional object files resulting from compiling foreign
         -- code. They come from two sources: foreign stubs, and
         -- add{C,Cxx,Objc,Objcxx}File from template haskell
       iface :: Maybe ModIface
         -- ^ Interface generated by HscOut phase. Only available after the
         -- phase runs.
  }

hsc_envL LENS_FIELD(hsc_env)
maybe_locL LENS_FIELD(maybe_loc)
foreign_osL LENS_FIELD(foreign_os)
ifaceL LENS_FIELD(iface)

pipeStateDynFlags :: PipeState -> DynFlags
pipeStateDynFlags = hsc_dflags . hsc_env

pipeStateModIface :: PipeState -> Maybe ModIface
pipeStateModIface = iface

data PipelineOutput
  = Temporary TempFileLifetime
        -- ^ Output should be to a temporary file: we're going to
        -- run more compilation steps on this output later.
  | Persistent
        -- ^ We want a persistent file, i.e. a file in the current directory
        -- derived from the input filename, but with the appropriate extension.
        -- eg. in "ghc -c Foo.hs" the output goes into ./Foo.o.
  | SpecificFile
        -- ^ The output must go into the specific outputFile in DynFlags.
        -- We don't store the filename in the constructor as it changes
        -- when doing -dynamic-too.
    deriving Show

getPipeEnv :: CompPipeline PipeEnv
getPipeEnv = ask

getPipeState :: CompPipeline PipeState
getPipeState = get

getPipeSession :: CompPipeline HscEnv
getPipeSession = hsc_env <$> get

instance HasDynFlags CompPipeline where
    getDynFlags = hsc_dflags <$> getPipeSession
